#!/usr/bin/env python3
import flloat.parser.ltlf
import flloat.ltlf
import os

def serialize(ltlf, file):
	print(str(flloat.parser.ltlf.LTLfParser()(ltlf).to_automaton().to_graphviz()), file=open(file, 'w'))

if __name__ == '__main__':
	print("Until")
	serialize("a U b", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache', 'Until'))
	print("Release")
	serialize("a R b", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'Release'))
	print("Diamond")
	serialize("F a", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'Diamond'))
	print("Box")
	serialize("G a", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'Box'))
	print("WeakUntil")
	serialize("(a U b) | G(b)", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',   'WeakUntil'))
	print("Choice")
	serialize("F(a) | F(b)", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'WeakUntil'))
	print("ExlChoice")
	serialize("(F(a) | F(b)) & (!(F(a) & F(b)))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'ExlChoice'))
	print("RespExistence")
	serialize("(F(a) -> F(b))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'RespExistence'))
	print("CoExistence")
	serialize("(F(a) -> F(b)) & (F(b) -> F(a))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'CoExistence'))
	print("Response")
	serialize("G(a -> F(b))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'Response'))
	print("Precedence")
	serialize("((!b) U a) | G(!b)", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'Precedence'))
	print("Succession")
	serialize("G(a -> F(b)) & (((!b) U a) | G(!b))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'Succession'))
	print("AltResponse")
	serialize("G(a -> X((!a) U b))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'AltResponse'))
	print("AltPrecedence")
	serialize("(((!b) U a) | G(!b)) & G(b -> X((((!b) U a) | G(!b))))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'AltPrecedence'))
	print("AltSuccession")
	serialize("G(a -> X((!a) U b)) & (((!b) U a) | G(!b)) & G(b -> X((((!b) U a) | G(!b))))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'AltSuccession'))
	print("ChainResponse")
	serialize("G(a -> X(b))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'ChainResponse'))
	print("ChainPrecedence")
	serialize("G(X(b) -> a)", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'ChainPrecedence'))
	print("ChainSuccession")
	serialize("G(a <-> X(b))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'ChainSuccession'))
	print("NotCoExistence")
	serialize("!(F(a) & F(b))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'NotCoExistence'))
	print("NegSuccession")
	serialize("G(a -> !F(b))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'NegSuccession'))
	print("NegChainSuccession")
	serialize("G(a <-> X(!b))", os.path.join(os.getcwd(), os.pardir, 'data', 'cache', 'graph_pattern_cache',  'NegChainSuccession'))